name: Prod-V2-Terraform-Apply

on:
  workflow_dispatch:
    inputs:
      confirm:
        description: 'Type "apply-prod-v2" to confirm deployment'
        required: true
        default: ''

permissions:
  contents: read

jobs:
  Terraform-Apply:
    runs-on: ubuntu-latest
    name: Deploy Production V2 Infrastructure
    if: github.event.inputs.confirm == 'apply-prod-v2'
    steps:
      - name: Checkout files
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Verify S3 Backend Exists
        run: |
          echo "Checking if S3 backend bucket exists..."
          if ! aws s3 ls s3://dil-prod-v2-terraform-state 2>/dev/null; then
            echo "Creating S3 bucket for Terraform state..."
            aws s3api create-bucket \
              --bucket dil-prod-v2-terraform-state \
              --region us-east-1
            
            # Enable versioning
            aws s3api put-bucket-versioning \
              --bucket dil-prod-v2-terraform-state \
              --versioning-configuration Status=Enabled
            
            echo "S3 bucket created successfully"
          else
            echo "S3 bucket already exists"
          fi

      - name: Verify DynamoDB Lock Table Exists
        run: |
          echo "Checking if DynamoDB lock table exists..."
          if ! aws dynamodb describe-table --table-name dil-prod-v2-terraform-locks --region us-east-1 2>/dev/null; then
            echo "Creating DynamoDB table for state locking..."
            aws dynamodb create-table \
              --table-name dil-prod-v2-terraform-locks \
              --attribute-definitions AttributeName=LockID,AttributeType=S \
              --key-schema AttributeName=LockID,KeyType=HASH \
              --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5 \
              --region us-east-1
            
            echo "Waiting for table to be active..."
            aws dynamodb wait table-exists --table-name dil-prod-v2-terraform-locks --region us-east-1
            echo "DynamoDB table created successfully"
          else
            echo "DynamoDB table already exists"
          fi

      - name: Recover Scheduled Secrets
        run: |
          echo "Checking for secrets scheduled for deletion..."
          SECRET_NAME="dil-prod-v2-google-credentials"
          
          # Try to restore the secret if it's scheduled for deletion
          aws secretsmanager restore-secret --secret-id "$SECRET_NAME" --region us-east-2 2>/dev/null || echo "Secret not scheduled for deletion or doesn't exist"
        continue-on-error: true

      - name: Cache Terraform plugins
        uses: actions/cache@v3
        with:
          path: |
            ~/.terraform.d/plugin-cache
            prod-v2/.terraform
          key: ${{ runner.os }}-terraform-prod-v2-${{ hashFiles('**/*.tf') }}
          restore-keys: |
            ${{ runner.os }}-terraform-prod-v2-
            
      - name: Terraform Init
        working-directory: prod-v2
        run: terraform init 

      - name: Terraform Validate
        working-directory: prod-v2
        run: terraform validate

      - name: Terraform Plan
        working-directory: prod-v2
        run: terraform plan -out=tfplan
        env:
          TF_VAR_supabase_url: ${{ secrets.SUPABASE_URL }}
          TF_VAR_supabase_service_key: ${{ secrets.SUPABASE_SERVICE_KEY }}
          TF_VAR_openai_api_key: ${{ secrets.OPENAI_API_KEY }}
          TF_VAR_eleven_api_key: ${{ secrets.ELEVEN_API_KEY }}
          TF_VAR_eleven_voice_id: ${{ secrets.ELEVEN_VOICE_ID }}
          TF_VAR_wp_site_url: ${{ secrets.WP_SITE_URL }}
          TF_VAR_wp_api_username: ${{ secrets.WP_API_USERNAME }}
          TF_VAR_wp_api_application_password: ${{ secrets.WP_API_APPLICATION_PASSWORD }}
          TF_VAR_google_credentials_json: ${{ secrets.GOOGLE_CREDENTIALS_JSON }}
          TF_VAR_database_url: ${{ secrets.DATABASE_URL }}
          TF_VAR_ai-tutor_image_tag: "latest"
          TF_VAR_db_mcp_server_tag: "latest"
          TF_VAR_ssl_certificate_arn: "arn:aws:acm:us-east-1:342834686411:certificate/e687717b-da1f-431a-94eb-76f6a5e21ea4"
          TF_VAR_cloudfront_aliases: '["learn.dil.org", "www.learn.dil.org"]'
          TF_CLI_ARGS: "-lock-timeout=300s"

      - name: Terraform Apply
        working-directory: prod-v2
        run: terraform apply tfplan
        env:
          TF_CLI_ARGS: "-lock-timeout=300s"

      - name: Get Outputs
        working-directory: prod-v2
        run: |
          echo "=== Production V2 Deployment Complete ==="
          echo "CDN URL: $(terraform output -raw cdn_url)"
          echo "ALB DNS: $(terraform output -raw alb_dns_name)"
          echo "ECS Cluster: $(terraform output -raw ecs_cluster_name)"
          echo "MemoryDB Endpoint: $(terraform output -raw memorydb_endpoint)"
          echo ""
          echo "⚠️  Next Steps:"
          echo "1. Test all endpoints thoroughly"
          echo "2. Update Route 53 DNS records to point to new CloudFront"
          echo "3. Monitor CloudWatch metrics for 24-48 hours"
          echo "4. After validation, consider decommissioning old prod"

      - name: Notify Success
        if: success()
        run: |
          echo "✅ Production V2 deployment successful!"
          echo "Environment: dil-prod-v2"
          echo "Region: us-east-2"
          echo "VPC CIDR: 12.0.0.0/16"

